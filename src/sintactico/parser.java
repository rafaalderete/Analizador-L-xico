
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\005\004\000\002\005\003\000\002\006\011" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\004\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\015\011\000" +
    "\002\014\011\000\002\014\015\000\002\016\003\000\002" +
    "\016\005\000\002\016\004\000\002\017\005\000\002\017" +
    "\005\000\002\020\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\005\000\002\026\013\000\002\030\003\000\002" +
    "\030\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\006\004\001\002\000\004\040\136\001" +
    "\002\000\004\002\133\001\002\000\004\004\010\001\002" +
    "\000\004\002\000\001\002\000\012\013\016\014\020\016" +
    "\012\045\011\001\002\000\004\025\130\001\002\000\004" +
    "\050\127\001\002\000\014\005\126\013\016\014\020\016" +
    "\012\045\011\001\002\000\016\005\uffed\013\uffed\014\uffed" +
    "\016\uffed\043\uffed\045\uffed\001\002\000\016\005\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\043\ufff2\045\ufff2\001\002\000\004" +
    "\036\120\001\002\000\016\005\uffee\013\uffee\014\uffee\016" +
    "\uffee\043\uffee\045\uffee\001\002\000\004\036\021\001\002" +
    "\000\016\031\023\036\026\044\031\045\033\046\032\047" +
    "\036\001\002\000\054\005\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\027" +
    "\uffd8\030\uffd8\032\uffd8\033\uffd8\034\071\035\072\037\uffd8" +
    "\041\uffd8\043\uffd8\045\uffd8\051\uffd8\001\002\000\014\036" +
    "\026\044\031\045\033\046\032\047\036\001\002\000\054" +
    "\005\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\037\uffd3\041\uffd3\043\uffd3\045" +
    "\uffd3\051\uffd3\001\002\000\010\027\113\030\114\037\uffe9" +
    "\001\002\000\016\031\023\036\026\044\031\045\033\046" +
    "\032\047\036\001\002\000\054\005\uffd2\013\uffd2\014\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\027\uffd2\030\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\037\uffd2\041\uffd2\043\uffd2\045\uffd2\051\uffd2\001\002\000" +
    "\022\017\101\020\106\021\103\022\105\023\102\024\100" +
    "\032\067\033\066\001\002\000\004\036\050\001\002\000" +
    "\054\005\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\041\uffcd\043\uffcd" +
    "\045\uffcd\051\uffcd\001\002\000\054\005\uffd4\013\uffd4\014" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\037\uffd4\041\uffd4\043\uffd4\045\uffd4\051\uffd4\001\002" +
    "\000\054\005\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\041\uffd5\043" +
    "\uffd5\045\uffd5\051\uffd5\001\002\000\004\037\037\001\002" +
    "\000\054\005\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\041\uffcc\043" +
    "\uffcc\045\uffcc\051\uffcc\001\002\000\004\042\040\001\002" +
    "\000\012\013\016\014\020\016\012\045\011\001\002\000" +
    "\014\013\016\014\020\016\012\043\042\045\011\001\002" +
    "\000\020\005\uffeb\013\uffeb\014\uffeb\015\044\016\uffeb\043" +
    "\uffeb\045\uffeb\001\002\000\016\005\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\043\ufff3\045\ufff3\001\002\000\004\042\045\001" +
    "\002\000\012\013\016\014\020\016\012\045\011\001\002" +
    "\000\014\013\016\014\020\016\012\043\047\045\011\001" +
    "\002\000\016\005\uffea\013\uffea\014\uffea\016\uffea\043\uffea" +
    "\045\uffea\001\002\000\006\032\053\034\052\001\002\000" +
    "\006\046\032\047\036\001\002\000\006\046\uffce\047\uffce" +
    "\001\002\000\006\046\uffcf\047\uffcf\001\002\000\004\051" +
    "\055\001\002\000\004\040\056\001\002\000\014\036\057" +
    "\044\031\045\033\046\032\047\036\001\002\000\014\036" +
    "\057\044\031\045\033\046\032\047\036\001\002\000\012" +
    "\032\067\033\066\041\uffdb\051\uffdb\001\002\000\006\041" +
    "\063\051\062\001\002\000\014\036\057\044\031\045\033" +
    "\046\032\047\036\001\002\000\004\037\064\001\002\000" +
    "\054\005\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\041\uffd0\043\uffd0" +
    "\045\uffd0\051\uffd0\001\002\000\012\032\067\033\066\041" +
    "\uffdc\051\uffdc\001\002\000\014\036\057\044\031\045\033" +
    "\046\032\047\036\001\002\000\014\036\057\044\031\045" +
    "\033\046\032\047\036\001\002\000\054\005\uffda\013\uffda" +
    "\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\027\uffda\030\uffda\032\uffda\033\uffda\034\071" +
    "\035\072\037\uffda\041\uffda\043\uffda\045\uffda\051\uffda\001" +
    "\002\000\014\036\057\044\031\045\033\046\032\047\036" +
    "\001\002\000\014\036\057\044\031\045\033\046\032\047" +
    "\036\001\002\000\054\005\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\027" +
    "\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6" +
    "\041\uffd6\043\uffd6\045\uffd6\051\uffd6\001\002\000\054\005" +
    "\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\037\uffd7\041\uffd7\043\uffd7\045\uffd7" +
    "\051\uffd7\001\002\000\054\005\uffd9\013\uffd9\014\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034\071\035\072\037" +
    "\uffd9\041\uffd9\043\uffd9\045\uffd9\051\uffd9\001\002\000\010" +
    "\032\067\033\066\037\077\001\002\000\054\005\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\037\uffd1\041\uffd1\043\uffd1\045\uffd1\051\uffd1" +
    "\001\002\000\014\036\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\001\002\000\014\036\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\001\002\000\014\036\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\001\002\000\014\036\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\001\002\000\014\036\057\044\031\045" +
    "\033\046\032\047\036\001\002\000\014\036\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\001\002\000\014\036\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\001\002\000\014\027\uffe6" +
    "\030\uffe6\032\067\033\066\037\uffe6\001\002\000\024\017" +
    "\101\020\106\021\103\022\105\023\102\024\100\032\067" +
    "\033\066\037\077\001\002\000\004\037\112\001\002\000" +
    "\010\027\uffe5\030\uffe5\037\uffe5\001\002\000\014\036\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\001\002\000\014\036" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000\014" +
    "\036\026\044\031\045\033\046\032\047\036\001\002\000" +
    "\004\037\uffe8\001\002\000\004\037\uffe7\001\002\000\016" +
    "\031\023\036\026\044\031\045\033\046\032\047\036\001" +
    "\002\000\004\037\122\001\002\000\004\042\123\001\002" +
    "\000\012\013\016\014\020\016\012\045\011\001\002\000" +
    "\014\013\016\014\020\016\012\043\125\045\011\001\002" +
    "\000\016\005\uffec\013\uffec\014\uffec\016\uffec\043\uffec\045" +
    "\uffec\001\002\000\004\002\ufff4\001\002\000\016\005\ufff1" +
    "\013\ufff1\014\ufff1\016\ufff1\043\ufff1\045\ufff1\001\002\000" +
    "\016\036\057\044\031\045\033\046\032\047\036\050\131" +
    "\001\002\000\016\005\uffef\013\uffef\014\uffef\016\uffef\043" +
    "\uffef\045\uffef\001\002\000\022\005\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\032\067\033\066\043\ufff0\045\ufff0\001\002\000" +
    "\004\002\001\001\002\000\006\007\156\040\136\001\002" +
    "\000\006\007\ufffd\040\ufffd\001\002\000\004\045\137\001" +
    "\002\000\006\041\ufffa\051\ufffa\001\002\000\006\041\142" +
    "\051\141\001\002\000\004\045\155\001\002\000\004\026" +
    "\143\001\002\000\004\040\144\001\002\000\010\010\150" +
    "\011\146\012\147\001\002\000\006\041\ufff8\051\ufff8\001" +
    "\002\000\006\041\ufff6\051\ufff6\001\002\000\006\041\ufff5" +
    "\051\ufff5\001\002\000\006\041\ufff7\051\ufff7\001\002\000" +
    "\006\041\153\051\152\001\002\000\010\010\150\011\146" +
    "\012\147\001\002\000\006\007\ufffc\040\ufffc\001\002\000" +
    "\006\041\ufff9\051\ufff9\001\002\000\006\041\ufffb\051\ufffb" +
    "\001\002\000\004\004\uffff\001\002\000\006\007\ufffe\040" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\004\003\005\001\001\000\006\005" +
    "\133\006\134\001\001\000\002\001\001\000\004\004\006" +
    "\001\001\000\002\001\001\000\012\012\012\013\014\014" +
    "\016\015\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\042\014\016\015\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\034\017\024\023\027\024" +
    "\021\025\033\026\026\027\023\001\001\000\002\001\001" +
    "\000\016\017\116\023\027\024\021\025\033\026\026\027" +
    "\023\001\001\000\002\001\001\000\004\020\114\001\001" +
    "\000\020\016\110\017\024\023\107\024\021\025\033\026" +
    "\026\027\023\001\001\000\002\001\001\000\004\021\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\040\013\014\014\016\015" +
    "\013\001\001\000\010\013\042\014\016\015\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\045\013\014\014\016\015\013\001\001\000\010" +
    "\013\042\014\016\015\013\001\001\000\002\001\001\000" +
    "\004\030\050\001\001\000\004\027\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\060\023\057\024\021\025\033\026\026" +
    "\027\023\001\001\000\014\023\075\024\021\025\033\026" +
    "\026\027\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\064\024\021\025\033\026\026\027\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\074\025\033\026\026\027\023\001\001\000" +
    "\012\024\067\025\033\026\026\027\023\001\001\000\002" +
    "\001\001\000\010\025\073\026\026\027\023\001\001\000" +
    "\010\025\072\026\026\027\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\023\106\024\021\025" +
    "\033\026\026\027\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\115\023\027\024\021\025\033\026" +
    "\026\027\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\120\017\024\023\027\024\021\025\033\026" +
    "\026\027\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\123\013\014\014\016\015\013\001\001\000" +
    "\010\013\042\014\016\015\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\023\131\024" +
    "\021\025\033\026\026\027\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\156\001" +
    "\001\000\002\001\001\000\004\007\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\150\011\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String output = "";

    private List<String> tempToken = new ArrayList<String>();
    public List<String> toAddToken = new ArrayList<String>();

    private Boolean existToken (String value) {
		for (String word : tempToken) {
			if (value.equals(word))
				return true;
		}
		return false;
	}

    private void toAddTable (String value, String token) {
        if (!existToken(value)){
            toAddToken.add(value+";"+token+";"+"null");
            tempToken.add(value);
        }    
    }

    private void toAddTableId (String values, String tipos) {
        String[] toAddValues = values.split(",");
        String[] toAddTipos = tipos.split(",");
        for (int i = 0; i < toAddValues.length; i++) {
            if (!existToken(toAddValues[i])){
                toAddToken.add(toAddValues[i] + ";" + "ID" + ";" + toAddTipos[i]);
                tempToken.add(toAddValues[i]);
            }   
		}  
    }

    private void addRegla (String regla) {
        output += regla + "\n";
    }
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        addRegla("Error en la linea " + s.right + " columna " + (s.left+1) + ", valor no reconocido " + s.value );
    }

    public void unrecovered_syntax_error(Symbol s){
        addRegla("Error en la linea " + s.right + " columna " + (s.left+1) + ", valor no reconocido " + s.value );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa_completo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa_completo ::= seccion_declaraciones seccion_programa 
            {
              Object RESULT =null;
		 addRegla("[Regla 0]  Compila correctamente llegando al simbolo start"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa_completo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seccion_declaraciones ::= DECLARE declaraciones ENDDECLARE 
            {
              Object RESULT =null;
		 addRegla("[Regla 1] Seccion declaraciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 2] Declaraciones valor= " + decs + dec); RESULT = decs.toString() + dec.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaracion 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 3] Declaracion valor= " + dec); RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= C_A lista_id C_C ASIGN_DECLR C_A lista_tipo C_C 
            {
              Object RESULT =null;
		int ca1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ca1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ca1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ca2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ca2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ca2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ltipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 4] Formato declaracion valor= " + ca1 + lid + cc1 + as + ca2 + ltipo + cc2); toAddTableId(lid.toString(), ltipo.toString()); RESULT = ca1.toString() + lid.toString() + cc1.toString() + as.toString() + ca2.toString() + ltipo.toString() + cc2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_id ::= lista_id COMA ID 
            {
              Object RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 5] Formato listado ID valor= " + lid + com + id); RESULT = lid.toString() + com.toString() + id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 6] Terminal ID valor= " + id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_tipo ::= lista_tipo COMA tipo 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 7] Formato listado tipos valor= " + lt + com + t); RESULT = lt.toString() + com.toString() + t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_tipo ::= tipo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 8] Tipo valor= " + t); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= TIPO_INT 
            {
              Object RESULT =null;
		int tintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tint = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 9] Terminal TIPO_INT valor= " + tint); RESULT = tint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= TIPO_FLOAT 
            {
              Object RESULT =null;
		int tfloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tfloat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 10] Terminal TIPO_FLOAT valor= " + tfloat); RESULT = tfloat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= TIPO_STRING 
            {
              Object RESULT =null;
		int tstringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tstring = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 11] Terminal TIPO_STRING valor= " + tstring); RESULT = tstring; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccion_programa ::= BEGIN sentencias END 
            {
              Object RESULT =null;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 12] Seccion programa"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_programa",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sents = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 13] Sentencias valor= " + sents + sent); RESULT = sents.toString() + sent.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 14] Sentencia valor= " + sent); RESULT = sent.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= PRINT CONST_STRING 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cstringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cstringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cstring = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 15] Sentencia PRINT valor= " + pr + cstring); toAddTable(cstring.toString(), "CONST_STRING"); RESULT = pr.toString() + cstring.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 16] Sentencia asignacion expresion valor= " + id + as + ex); RESULT = id.toString() + as.toString() + ex.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= ID ASIGN CONST_STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cstringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cstringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cstring = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 17] Sentencia asignacion constante string valor= " + id + as + cstring); toAddTable(cstring.toString(), "CONST_STRING"); RESULT = id.toString() + as.toString() + cstring.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= seccion_if 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 18] IF valor= " + sif); RESULT = sif; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= seccion_while 
            {
              Object RESULT =null;
		int swhileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swhiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object swhi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 19] WHILE valor= " +swhi); RESULT = swhi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seccion_while ::= WHILE P_A condicion P_C L_A sentencias L_C 
            {
              Object RESULT =null;
		int whileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object whi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sents = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 20] Formato WHILE valor= " + whi + pa + cond + pc + la + sents + lc); RESULT = whi.toString() + pa.toString() + cond.toString() + pc.toString() + la.toString() + sents.toString() + lc.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // seccion_if ::= IF P_A condicion P_C L_A sentencias L_C 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sents = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 21] Formato IF valor= " + sif + pa + cond + pc + la + sents + lc); RESULT = sif.toString() + pa.toString() + cond.toString() + pc.toString() + la.toString() + sents.toString() + lc.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccion_if ::= IF P_A condicion P_C L_A sentencias L_C ELSE L_A sentencias L_C 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int la1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int la1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object la1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sents1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sents1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sents1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lc1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int la2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int la2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object la2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sents2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sents2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sents2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 22] Formato IF-ELSE valor= " + sif + pa + cond + pc + la1 + sents1 + lc1 + els + la2 + sents2 + lc2); RESULT = sif.toString() + pa.toString() + cond.toString() + pc.toString() + la1.toString() + sents1.toString() + lc1.toString() + els.toString() + la2.toString() + sents2.toString() + lc2.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion ::= comparacion 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 23] Comparación valor= " + comp); RESULT = comp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= comparacion op_logico_bool comparacion 
            {
              Object RESULT =null;
		int complleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int complright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object compl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object compr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 24] Formato condicion AND-OR valor= " + compl + logb + compr); RESULT = compl.toString() + logb.toString() + compr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= OP_NOT comparacion 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 25] Formato condicion NOT valor= " + not + comp); RESULT = not.toString() + comp.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comparacion ::= expresion op_logico expresion 
            {
              Object RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 26] Formato comparacion valor= " + exl + log + exr ); RESULT = exl.toString() + log.toString() + exr.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparacion ::= P_A condicion P_C 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 27] Parentesis condicion valor= " + pa + cond + pc); RESULT = pa.toString() + cond.toString() + pc.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_logico_bool ::= OP_AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 28] Terminal OP_AND valor= "+ and); RESULT = and; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico_bool",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_logico_bool ::= OP_OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 29] Terminal OP_OR valor= " + or); RESULT = or; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico_bool",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_logico ::= OP_MENOR 
            {
              Object RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object men = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 30] Terminal OP_MENOR valor= " + men); RESULT = men; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_logico ::= OP_MAYOR 
            {
              Object RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object may = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 31] Terminal OP_MAYOR valor= " + may); RESULT = may; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_logico ::= OP_IGUAL 
            {
              Object RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 32] Terminal OP_IGUAL valor= " + igual); RESULT = igual; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_logico ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		int maigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object maigual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 33] Terminal OP_MAYOR_IGUAL valor= " + maigual); RESULT = maigual; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_logico ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		int meigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object meigual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 34] Terminal OP_MENOR_IGUAL valor= " + meigual); RESULT = meigual; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_logico ::= OP_DIST 
            {
              Object RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 35] Terminal OP_MAYOR_DIST valor= " + dist); RESULT = dist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 36] Formato lista expresiones valor= " + list + com + ex); RESULT = list.toString() + com.toString() + ex.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 37] Expresion valor=" + ex); RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion OP_SUM termino 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 38] Formato expresion OP_SUM valor= " + ex + sum + t); RESULT = ex.toString() + sum.toString() + t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion OP_RES termino 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 39] Formato expresion OP_RES valor= " + ex + res + t); RESULT = ex.toString() + res.toString() + t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 40] Termino valor= "+ t); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= termino OP_MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 41] Formato termino OP_MULT valor= " + t + mult + f); RESULT = t.toString() + mult.toString() + f.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 42] Formato termino OP_DIV valor= " + t + div + f); RESULT = t.toString() + div.toString() + f.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 43] Factor valor=" + f); RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 44] Terminal ID valor= " + id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= constante_num 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 45] Constante numerica valor= " + num); RESULT = num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= func_map 
            {
              Object RESULT =null;
		int fmapleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmapright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fmap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 46] Funcion MAP valor= " + fmap); RESULT = fmap; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= P_A expresion P_C 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 47] Parentesis expresion valor= " + pa + ex + pc); RESULT = pa.toString() + ex.toString() + pc.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // func_map ::= MAP P_A op_map constante_num COMA C_A lista_expresiones C_C P_C 
            {
              Object RESULT =null;
		int mapleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int mapright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object map = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 48] Formato MAP valor= " + map + pa + op + num + com + ca + list + cc + pc); RESULT = map.toString() + pa.toString() + op.toString() + num.toString() + com.toString() + ca.toString() + list.toString() + cc.toString() + pc.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_map",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_map ::= OP_SUM 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 49] Terminal OP_SUM valor= " + sum); RESULT = sum; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_map",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_map ::= OP_MULT 
            {
              Object RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 50] Terminal OP_MULT valor= " + mult); RESULT = mult; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_map",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constante_num ::= CONST_INT 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 51] Terminal CONST_INT valor= " + ent); toAddTable(ent.toString(), "CONST_INT"); RESULT = ent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_num",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante_num ::= CONST_REAL 
            {
              Object RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addRegla("[Regla 52] Terminal CONST_REAL, valor= " + real); toAddTable(real.toString(), "CONST_REAL"); RESULT = real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_num",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
